import java.awt.Canvas;
import java.awt.Color;
import java.awt.Dimension;
import java.awt.Font;
import java.awt.Graphics;
import java.awt.image.BufferStrategy;
import java.awt.image.BufferedImage;

import javax.swing.JFrame;

public class Game extends Canvas implements Runnable {
	
	public static JFrame frame;
	private Thread thread;
	private boolean isRunnig = true;
	private final int WIDTH = 160;
	private final int HEIGHT = 120;
	private final int SCALE = 4;
	private BufferedImage image;
	
	public Game() {
		
		setPreferredSize(new Dimension(WIDTH*SCALE, HEIGHT*SCALE)); //Seta as dimensões do Frame
		initFrame();
		image = new BufferedImage(WIDTH, HEIGHT, BufferedImage.TYPE_INT_RGB);
		
	}
	
	public void initFrame() {
		
		frame = new JFrame("Game #1"); //Criai um novo Frame com título "Game #1"
		frame.add(this); //Adiciona o Frame
		frame.setResizable(false); //Usuário não pode redimensionar a janela
		frame.pack(); //Após adiconado o Cavas, ele calcula as dimensões a serem setadas
		//ou seja, redimensiona a janela de acordp com os componentes adicinados
		frame.setLocationRelativeTo(null); //Janela deve ficar no centro
		frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE); //Ao fechar o Frame também fechar a Aplicação
		frame.setVisible(true); //Ao iniciar o frame já fica visivel
		
	}
	
	public synchronized void start() {
		
		thread = new Thread(this);
		thread.start();
		isRunnig = true;
		
	}
	
	public synchronized void stop() {
		isRunnig = false;
		try {
			thread.join();
		} catch (InterruptedException e) {
			e.printStackTrace();
		}
	}

	public static void main(String[] args) {
		
		Game game = new Game();
		game.start();
		
	}
	
	public void tick() { //Update... aqui está toda a lógica do jogo
		
	}
	
	public void render() { //Método para rederizar tudo
		
		BufferStrategy bs = this.getBufferStrategy();
		if(bs == null) {
			this.createBufferStrategy(3); //Sequencia de buffres para otimizar a renderização
			return;
		}
		Graphics g = image.getGraphics();; //A partir de agora podemos renderizar a vontade
		g.setColor(new Color(0, 0, 0));
		g.fillRect(0, 0, WIDTH, HEIGHT);
		
		//g.setColor(Color.GREEN);
		//g.fillOval(0, 40, 50, 50);
		
		g.setFont(new Font("Arial", Font.BOLD, 20));
		g.setColor(Color.WHITE);
		g.drawString("Olá Mundo!!!", 19, 19);
		g = bs.getDrawGraphics();
		g.drawImage(image, 0, 0, WIDTH*SCALE, HEIGHT*SCALE, null);
		bs.show();
	}
	
	@Override
	public void run() {
		
		long lastTime = System.nanoTime(); //Pega o tempo atual do computador em nanosegundos ao iniciar o jogo
		double amountOfTicks = 60.0; //60 frames por segundo
		double ns = 1000000000 / amountOfTicks; //Dividindo 1 segundo 60 (amountOfTicks),
		//afim de personalizar o momento dos Ticks (Updates)... 60fps
		double delta = 0;
		int frames = 0;
		double timer = System.currentTimeMillis();
		
		while(isRunnig) {
			long now = System.nanoTime(); //Pega o tempo atual
			delta += (now - lastTime) / ns;
			lastTime = now;
			if(delta >= 1) {
				tick();
				render();
				frames++;
				delta--;
			}
			if(System.currentTimeMillis() - timer >= 1000) {
				System.out.println("FPS: " + frames);
				frames = 0;
				timer += 1000; //Mesma coisa que timer = System.currentTimeMillis()
			}
		}
		stop();
	}

}
